package com.example.demobcknd.controller;

import java.util.Optional;

import com.example.demobcknd.Repositories.Repo;
import com.example.demobcknd.model.User;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/demo") // This means URL's start with /demo (after Application path)
public class UserController {
    @Autowired // This means to get the bean called userRepository
               // Which is auto-generated by Spring, we will use it to handle the data
    private Repo userRepository = new Repo(){
	
		@Override
		public <S extends User> Iterable<S> saveAll(Iterable<S> entities) {
			return null;
		}
	
		@Override
		public <S extends User> S save(S entity) {
			return null;
		}
	
		@Override
		public Optional<User> findById(Integer id) {
			return null;
		}
	
		@Override
		public Iterable<User> findAllById(Iterable<Integer> ids) {
			return null;
		}
	
		@Override
		public Iterable<User> findAll() {
			return null;
		}
	
		@Override
		public boolean existsById(Integer id) {
			return false;
		}
	
		@Override
		public void deleteById(Integer id) {
			
		}
	
		@Override
		public void deleteAll(Iterable<? extends User> entities) {
			
		}
	
		@Override
		public void deleteAll() {
			
		}
	
		@Override
		public void delete(User entity) {
			
		}
	
		@Override
		public long count() {
			return 0;
		}
	};

	@GetMapping(path="/add") // Map ONLY GET Requests
	public @ResponseBody String addNewUser (@RequestParam String name
			, @RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		User n = new User();
		n.setName(name);
		n.setEmail(email);
		userRepository.save(n);
		return "Saved";
	}

	@GetMapping(path="/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}
}